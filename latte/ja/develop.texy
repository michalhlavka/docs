開発者向けプラクティス
***********


インストール方法 .[#toc-installation]
=============================

Latteをインストールするには、Composerを使用するのが一番です。

```shell
composer require latte/latte
```

サポートされているPHPのバージョン（最新のパッチLatteのバージョンに適用されます。）

| バージョン | 対応PHP
|-----------------|-------------------
| Latte 3.0 | PHP 8.0 - 8.2
| Latte 2.11 | PHP 7.1～8.2
| Latte 2.8 - 2.10| PHP 7.1 - 8.1


テンプレートのレンダリング方法 .[#toc-how-to-render-a-template]
================================================

テンプレートをレンダリングするには？次の簡単なコードを使うだけです。

```php
$latte = new Latte\Engine;
// cache directory
$latte->setTempDirectory('/path/to/tempdir');

$params = [ /* template variables */ ];
// or $params = new TemplateParameters(/* ... */);

// render to output
$latte->render('template.latte', $params);
// or render to variable
$output = $latte->renderToString('template.latte', $params);
```

パラメータには配列や[オブジェクトを |#Parameters as a class]指定することができ、エディタでの型チェックやサジェストを行うことができます。

.[note]
[Latte examples |https://github.com/nette-examples/latte] リポジトリに使用例があります。


パフォーマンスとキャッシュ .[#toc-performance-and-caching]
=============================================

Latteのテンプレートは非常に高速です。これはLatteがテンプレートを直接PHPコードにコンパイルし、ディスク上にキャッシュするからです。そのため、純粋なPHPで書かれたテンプレートと比較して、余分なオーバーヘッドがありません。

キャッシュはソースファイルを変更するたびに自動的に再生成されます。そのため、開発中にLatteのテンプレートを編集しても、ブラウザ上ですぐに変更内容を確認することができ、便利です。本番環境ではこの機能を無効にして、パフォーマンスを少し節約することができます。

```php
$latte->setAutoRefresh(false);
```

本番サーバに展開した場合、特に大規模なアプリケーションでは、最初のキャッシュ生成に時間がかかるのは当然です。Latteは"キャッシュスタンピード":https://en.wikipedia.org/wiki/Cache_stampede に対する予防策を内蔵しています。
これはサーバーが多数の同時リクエストを受けた場合、Latteのキャッシュがまだ存在しないため、それらがすべて同時にキャッシュを生成してしまうという状況です。これはCPUを浪費させます。
Latteは賢く、複数の同時リクエストがあった場合、最初のスレッドだけがキャッシュを生成し、他のスレッドは待ってからそれを使用します。


クラスとしてのパラメータ .[#toc-parameters-as-a-class]
==========================================

配列としてテンプレートに変数を渡すよりも、クラスを作成する方がよいでしょう。[型安全な記法が |type-system]得られるし、[IDEでの提案も良い |recipes#Editors and IDE]。
での提案、[フィルタや |extending-latte#Filters Using the Class] [関数を |extending-latte#Functions Using the Class] [登録 |extending-latte#Filters Using the Class]する方法などがあります。

```php
class MailTemplateParameters
{
	public function __construct(
		public string $lang,
		public Address $address,
		public string $subject,
		public array $items,
		public ?float $price = null,
	) {}
}

$latte->render('mail.latte', new MailTemplateParameters(
	lang: $this->lang,
	subject: $title,
	price: $this->getPrice(),
	items: [],
	address: $userAddress,
));
```


変数の自動エスケープを無効にする .[#toc-disabling-auto-escaping-of-variable]
============================================================

変数にHTML文字列が含まれている場合、Latteが自動的に（つまり二重に）エスケープしないようにマークすることができます。これにより、テンプレートで`|noescape` を指定する必要がなくなります。

最も簡単な方法は、文字列を`Latte\Runtime\Html` オブジェクトで包むことです。

```php
$params = [
	'articleBody' => new Latte\Runtime\Html($article->htmlBody),
];
```

また、Latte は`Latte\HtmlStringable` インターフェースを実装したすべてのオブジェクトをエスケープするわけではありません。そこで、`__toString()` メソッドが自動的にエスケープされない HTML コードを返すクラスを独自に作成することができます。

```php
class Emphasis extends Latte\HtmlStringable
{
	public function __construct(
		private string $str,
	) {
	}

	public function __toString(): string
	{
		return '<em>' . htmlspecialchars($this->str) . '</em>';
	}
}

$params = [
	'foo' => new Emphasis('hello'),
];
```

.[warning]
`__toString` メソッドは正しい HTML を返し、パラメータのエスケープを提供しなければなりません。そうでなければ XSS 脆弱性が発生する可能性があります!


フィルターやタグなどを使ってLatteを拡張する方法 .[#toc-how-to-extend-latte-with-filters-tags-etc]
============================================================================

Latteに独自のフィルタや関数、タグなどを追加するにはどうすればよいのでしょうか？それは、Latteの[拡張の |extending Latte]章を参照してください。
もし、変更した内容を別のプロジェクトで再利用したい場合や、他の人と共有したい場合は、[拡張機能を作成 |creating-extension]する必要があります。


テンプレート内の任意のコード`{php ...}` .{data-version:3.0}{toc: RawPhpExtension}
===================================================================

タグの中に書くことができるのは PHP の式だけです。 [`{do}` |tags#do]タグの中に書けるのは PHP の式だけなので、たとえば`if ... else` やセミコロンで終端する文のような構文を挿入することはできません。

しかし、`RawPhpExtension` 拡張モジュールを登録すると、`{php ...}` タグが追加され、テンプレート作者の責任で任意の PHP コードを挿入することができます。

```php
$latte->addExtension(new Latte\Essential\RawPhpExtension);
```


テンプレート内の翻訳 .{data-version:3.0}{toc: TranslatorExtension}
========================================================

`TranslatorExtension` 拡張機能を使って [`{_...}` |tags#_], [`{translate}` |tags#translate]とフィルタ [`translate` |filters#translate]をテンプレートに追加します。これらはテンプレートの値もしくは一部を他の言語に翻訳するために使われます。パラメータは、翻訳を実行するメソッド (PHP callable) です。

```php
class MyTranslator
{
	public function __construct(private string $lang)
	{}

	public function translate(string $original): string
	{
		// create $translated from $original according to $this->lang
		return $translated;
	}
}

$translator = new MyTranslator($lang);
$extension = new Latte\Essential\TranslatorExtension(
	$translator->translate(...), // [$translator, 'translate'] in PHP 8.0
);
$latte->addExtension($extension);
```

トランスレータは、テンプレートがレンダリングされるときに実行時に呼び出されます。しかし、Latteはテンプレートのコンパイル時にすべての静的テキストを翻訳することができます。これは各文字列が一度だけ翻訳され、その翻訳結果がコンパイルされたファイルに書き込まれるため、パフォーマンスを節約することができます。これにより、キャッシュディレクトリに複数のコンパイル済みバージョンのテンプレートが作成され、各言語ごとに作成されます。これを行うには、2番目のパラメータとして言語を指定するだけです。

```php
$extension = new Latte\Essential\TranslatorExtension(
	$translator->translate(...),
	$lang,
);
```

静的なテキストとは、たとえば`{_'hello'}` や`{translate}hello{/translate}` のようなものです。 静的でないテキスト、たとえば`{_$foo}` は、実行時に翻訳されつづけます。

テンプレートは`{_$original, foo: bar}` や`{translate foo: bar}` を使ってトランスレータに追加のパラメータを渡すこともできます。トランスレータは`$params` 配列としてこれを受け取ります。

```php
public function translate(string $original, ...$params): string
{
	// $params['foo'] === 'bar'
}
```


デバッグとトレイシー .[#toc-debugging-and-tracy]
======================================

ラテはできるだけ快適に開発ができるように心がけています。デバッグのために、以下の3つのタグがあります。 [`{dump}` |tags#dump], [`{debugbreak}` |tags#debugbreak]と [`{trace}` |tags#trace].

素晴らしい[デバッグツールTracyを |tracy:en]インストールし、Latteプラグインを有効にすると、最も快適になります。

```php
// enables Tracy
Tracy\Debugger::enable();

$latte = new Latte\Engine;
// activates Tracy's extension
$latte->addExtension(new Latte\Bridges\Tracy\TracyExtension);

```

これで、テンプレート内のエラーも含めて、すべてのエラーが赤い画面できちんと表示され、行と列がハイライトされます[（動画 |https://github.com/nette/tracy/releases/tag/v2.9.0]）。
同時に右下の「Tracy Bar」に「Latte」のタブが表示され、レンダリングされたすべてのテンプレートとその関係（テンプレートやコンパイルされたコードをクリックすることも可能）、変数を明確に確認することができます。

[* latte-debugging.webp *]

Latteはテンプレートを可読なPHPコードにコンパイルするので、IDEでテンプレートを読み進めるのに便利です。


Linterテンプレートの構文を検証する .{data-version:2.11}{toc: Linter}
======================================================

Linterツールは、すべてのテンプレートに目を通し、構文エラーをチェックするのに役立ちます。これはコンソールから起動します。

```shell
vendor/bin/latte-lint <path>
```

カスタムタグを使用する場合は、カスタマイズした Linter も作成してください。例:`custom-latte-lint`:

```php
#!/usr/bin/env php
<?php

// enter the actual path to the autoload.php file
require __DIR__ . '/vendor/autoload.php';

$linter = new Latte\Tools\Linter($engine);
$linter->scanDirectory($path);

$engine = new Latte\Engine;
// registers individual extensions here
$engine->addExtension(/* ... */);

$path = $argv[1];
$linter = new Latte\Tools\Linter(engine: $engine);
$ok = $linter->scanDirectory($path);
exit($ok ? 0 : 1);
```


文字列からテンプレートを読み込む .[#toc-loading-templates-from-a-string]
========================================================

ファイルではなく、文字列からテンプレートをロードする必要がありますか、おそらくテスト目的のために？[StringLoaderは |extending-latte#stringloader]そのお手伝いをします。

```php
$latte->setLoader(new Latte\Loaders\StringLoader([
	'main.file' => '{include other.file}',
	'other.file' => '{if true} {$var} {/if}',
]));

$latte->render('main.file', $params);
```


例外ハンドラ .[#toc-exception-handler]
================================

期待される例外のハンドラを独自に定義することができます。の内部で発生した例外や、サンドボックス内で発生した例外は、このハンドラに渡されます。 [`{try}` |tags#try]と[サンドボックス |sandbox]内で発生した例外は、このハンドラに渡されます。

```php
$loggingHandler = function (Throwable $e, Latte\Runtime\Template $template) use ($logger) {
	$logger->log($e);
};

$latte = new Latte\Engine;
$latte->setExceptionHandler($loggingHandler);
```


レイアウトの自動検索 .[#toc-automatic-layout-lookup]
==========================================

タグを使用します。 [`{layout}` |template-inheritance#layout-inheritance]を使用すると、テンプレートはその親テンプレートを決定します。また、レイアウトを自動的に検索させることも可能です。この場合、`{layout}` タグを記述する必要がないため、テンプレートの作成が簡単になります。

これは、次のように実現します。

```php
$finder = function (Latte\Runtime\Template $template) {
	if (!$template->getReferenceType()) {
		// it returns the path to the parent template file
		return 'automatic.layout.latte';
	}
};

$latte = new Latte\Engine;
$latte->addProvider('coreParentFinder', $finder);
```

テンプレートがレイアウトを持つべきではない場合、`{layout none}` タグでその旨を示します。
